* {
  box-sizing: border-box;
}

html, body {
  padding: 0;
  margin: 0;
}

html {
  /* 需要隐藏最外层不可见区域以使视差生效 */
  overflow: hidden;
}

body {
  width: 100vw;
  height: 100vh;
  perspective: 100px;
  transform-style: preserve-3d;
  /* 3D的容器要允许overflow才能生效 */
  overflow-y: auto;
}

.main {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.list-item {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  width: 100%;
  height: 45vh;
  overflow: hidden;
}

.list-item:hover .item-image::before {
  background-color: rgba(0, 0, 0, 0.2);
}

.item-image {
  position: absolute;
  width: 100%;
  height: 100%;
  transform: translateZ(-50px) scale(2.4);
  z-index: -1;
}

.item-image::before {
  position: absolute;
  content: "";
  display: block;
  width: 100%;
  height: 100%;
  transition: all 0.3s ease;
  background-color: rgba(0, 0, 0, .4);
}

.item-image img {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.item-text {
  font-family: 'Courier New', Courier, monospace;
  text-align: center;
  color: #ffffff;
}

.item-title {
  font-size: 2rem;
  font-weight: bold;
  margin-bottom: 20px;
}

.item-desc {
  font-size: 1.2rem;
}

.icon {
  /* 相对定位 */
   position: absolute;
   height: 30px;
   border-radius: 25px;
   top: 260vh;
   /* 鼠标放到元素上呈现小手的形状 */
   cursor: pointer;
   background-color: #8fddf0;
   /* 盒子阴影 */
   box-shadow: 1px 1px 20px rgba(2, 255, 255, 1);
   width:20%;
   text-align:center ;
 /* 给父元素 加一个3D盒子属性 那么子元素就到背面了 这个属性是加到父元素上 但是影响的是子元素 */
 transform-style: preserve-3d;
}



.icon:hover {
	/* 动画 名称 时长 第三个属性是贝塞尔曲线 我们可以自定义动画的运动轨迹 让动画的运动轨迹有了很多种可能 第四个属性是当我们的动画完成是的状态 一般动画完成之后就回到了0%的状态 默认值是backwards 当我们给属性值是forwards的时候那么当动画到100%的时候就会停下来 不会再回到0% */
	animation: rotate-reverse 0.3s cubic-bezier(0.66, -0.47, 0.33, 1.5) forwards;
	animation: rotate 0.3s cubic-bezier(0.66, -0.47, 0.33, 1.5) forwards;


}
.front,
.back {

	/* 弹性布局 让元素垂直陈列 */
	flex-direction: column;
  /* 现在子元素垂直陈列 那么就是让子元素 水平居中 */
  align-items: center;
 	/* 平均分配高度给每一个子元素 */
	justify-content: space-around;
	/* 绝对定位  子元素是绝对定位 父元素需要相对定位 */
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	/* 1em = 16px */
	font-size: 1.3em;
	border-radius: 30px;
  background:#00000060;
 }
.back {
	/* 因为背面卡片要到后面去所以我们给背面卡片加一个沿Y轴旋转180度的属性 这里面我们可以看到是旋转了但是没有到后面 原因就是父盒子现在不是3D盒子 而是一个2D盒子 所以我们必须让父元素变成3D盒子 */
    	transform: rotateY(180deg);
 }
/* 下面我们定义一下翻转动画 */
@keyframes rotate {
	0% {
		transform: rotateY(0);
	}
	100% {
		transform: rotateY(180deg);
	}
}

@keyframes rotate-reverse {
	0% {
		transform: rotateY(180deg);
	}
	100% {
		transform: rotateY(0);
	}
}